# -*- coding: utf-8 -*-
"""asthmaClassification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1h6CCehtIw2vktLDyfbT1HhkeFzjBAFad
"""

import pandas as pd
import numpy as np

dataset = pd.read_csv('/content/asthma_disease_data.csv')

print(dataset.head())
print(dataset.shape)
print(dataset.columns.tolist())
print("\n missing values:")
print(dataset.isnull().sum().sum())

import seaborn as sns
sns.boxplot(dataset['BMI'])

sns.boxplot(dataset['SleepQuality'])

sns.boxplot(dataset['LungFunctionFEV1'])

sns.boxplot(dataset['LungFunctionFVC'])

sns.boxplot(dataset['DietQuality'])

sns.boxplot(dataset['PhysicalActivity'])

import matplotlib.pyplot as plt
correlation_matrix = dataset.corr()
plt.figure(figsize=(13, 13))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.1f')
plt.title('Correlation Heatmap')
plt.show()

dataset.drop(['PatientID', 'DoctorInCharge'], axis=1, inplace=True)
dataset = pd.get_dummies(dataset,columns=['Ethnicity','EducationLevel'])
print(dataset.head())
dataset.corr()['Diagnosis'].abs().sort_values()

from sklearn.model_selection import train_test_split
x=dataset.drop(['Diagnosis'], axis=1).values
y=dataset['Diagnosis'].values
xtrain, xtest, ytrain, ytest = train_test_split(x, y, test_size=0.2, random_state=0)

from sklearn.pipeline import Pipeline
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import MinMaxScaler
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.naive_bayes import GaussianNB
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import cross_val_score
from sklearn.metrics import confusion_matrix
from matplotlib import pyplot as plt
import seaborn as sns

models = {
    'Logistic Regression': LogisticRegression(),
    'Decision Tree': DecisionTreeClassifier(),
    'Random Forest': RandomForestClassifier(),
    'Support Vector Machine': SVC(),
    'Naive Bayes': GaussianNB(),
    'K-Nearest Neighbors': KNeighborsClassifier()
}

for model_name, model in models.items():
    pipeline = Pipeline([
        ('scaler', MinMaxScaler()),
        ('model', model)
    ])
    pipeline.fit(xtrain, ytrain)
    yp = pipeline.predict(xtest)

    accuracy = accuracy_score(ytest, yp)
    print(f"{model_name} Accuracy: {accuracy}")

    #cross validation
    scores = cross_val_score(pipeline, x, y, cv=5, scoring='accuracy')
    print(f"{model_name} : {scores}")
    print(f"{model_name} mean : {scores.mean()}")
    #confusion matrix
    cm = confusion_matrix(ytest, yp)
    plt.figure(figsize=(8, 6))
    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['No Disease', 'Disease'], yticklabels=['No Disease', 'Disease'])
    plt.title(f'{model_name} Confusion Matrix')
    plt.xlabel('Predicted')
    plt.ylabel('Actual')
    plt.show()

#not important
from sklearn.preprocessing import MinMaxScaler
sc = MinMaxScaler()
xtrain = sc.fit_transform(xtrain)
xtest = sc.transform(xtest)
#x = x-xmin / xmax-xmin

from sklearn.linear_model import LogisticRegression
lr=LogisticRegression()
lr.fit(xtrain, ytrain)
yp = lr.predict(xtest)
from sklearn.metrics import accuracy_score
print(accuracy_score(ytest, yp))

from sklearn.tree import DecisionTreeClassifier
dt = DecisionTreeClassifier()
dt.fit(xtrain, ytrain)
yp = dt.predict(xtest)
print(accuracy_score(ytest, yp))

from sklearn.ensemble import RandomForestClassifier
rf = RandomForestClassifier()
rf.fit(xtrain, ytrain)
yp = rf.predict(xtest)
print(accuracy_score(ytest, yp))

from sklearn.svm import SVC
svc = SVC()
svc.fit(xtrain, ytrain)
yp = svc.predict(xtest)
print(accuracy_score(ytest, yp))

from sklearn.naive_bayes import GaussianNB
nb = GaussianNB()
nb.fit(xtrain, ytrain)
yp = nb.predict(xtest)
print(accuracy_score(ytest, yp))

from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier()
knn.fit(xtrain, ytrain)
yp = knn.predict(xtest)
print(accuracy_score(ytest, yp))